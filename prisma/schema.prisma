// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(USER)
  passwordHash String? // for password login
  createdAt    DateTime @default(now())

  listings  Listing[]
  inquiries Inquiry[] // <-- has a proper opposite on Inquiry.user

  @@index([email])
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  priceCents  Int
  currency    String        @default("DKK")
  location    String?
  imageUrl    String?
  status      ListingStatus @default(ACTIVE)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  isAnimal     Boolean  @default(false)
  breed        String?
  ageMonths    Int?
  sex          Sex?
  vaccinated   Boolean?
  microchipped Boolean?
  pedigree     Boolean?
  color        String?
  size         String?

  createdAt DateTime @default(now())

  inquiries Inquiry[]

  @@index([status])
  @@index([title])
}

model Inquiry {
  id        String  @id @default(cuid())
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  // NEW: link inquiries to a user when available (keeps guest inquiries possible)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  buyerName  String
  buyerEmail String
  message    String
  ip         String?
  userAgent  String?

  createdAt DateTime @default(now())

  @@index([listingId])
  @@index([userId])
}

model MagicLink {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([email])
}

model Category {
  id   String @id @default(cuid())
  slug String @unique
  name String

  listings Listing[]
}

enum ListingStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}
